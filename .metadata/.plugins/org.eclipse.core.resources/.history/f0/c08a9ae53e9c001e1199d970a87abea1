package br.fateczl.com.agis.controller;

import java.util.Calendar;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import br.fateczl.com.agis.model.GradeCurricular;
import br.fateczl.com.agis.model.Turma;
import br.fateczl.com.agis.service.CursoService;
import br.fateczl.com.agis.service.DisciplinaService;
import br.fateczl.com.agis.service.GradeCurricularService;
import br.fateczl.com.agis.service.ProfessorService;
import br.fateczl.com.agis.service.TurmaService;
import jakarta.servlet.http.HttpServletRequest;

@Controller
public class SecretariaGradeCurricularMontarController {
	@Autowired
	private CursoService cserv;
	
	@Autowired
	private DisciplinaService dserv;
	
	@Autowired
	private GradeCurricularService gcserv;
	
	@Autowired
	private ProfessorService pserv;
	
	@Autowired
	private TurmaService tserv;
	
	@GetMapping("secretaria/grade/montar")
	public String get(ModelMap model) {
		model.addAttribute("cursos", cserv.listarTudo());
		return "secretaria/crudGrade/montarGrade";
	}
	
	@GetMapping("secretaria/grade/montar/deletarTurma/{codCurso}/{codTurma}")
	public String deletar(@PathVariable Map<String, String> param, RedirectAttributes model) {
		Calendar calendar = Calendar.getInstance();
		Long codCurso = Long.parseLong(param.get("codCurso"));
		Long codTurma = Long.parseLong(param.get("codTurma"));
		
		try {
			model.addFlashAttribute("curso", cserv.buscar(codCurso));
			model.addFlashAttribute("ano", calendar.get(Calendar.YEAR));
			model.addFlashAttribute("semestre", gcserv.getSemestre());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		model.addFlashAttribute("turmas", tserv.listarTurmasComNull());
		model.addFlashAttribute("disciplinas", dserv.listarTudo());
		model.addFlashAttribute("professores", pserv.listarTudo());
		
		return "redirect:/secretaria/grade/montar";
	}
	
	@PostMapping("secretaria/grade/montar")
	public String post(@RequestParam Map<String, String> param, ModelMap model) {
		Long cod = Long.parseLong(param.get("codCurso"));
		Calendar calendar = Calendar.getInstance();
		
		try {
			model.addAttribute("curso", cserv.buscar(cod));
			model.addAttribute("ano", calendar.get(Calendar.YEAR));
			model.addAttribute("semestre", gcserv.getSemestre());
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		model.addAttribute("turmas", tserv.listarTurmasComNull());
		model.addAttribute("disciplinas", dserv.listarTudo());
		model.addAttribute("professores", pserv.listarTudo());
		
		return "secretaria/crudGrade/montarGrade";
	}
	
	@PostMapping("/secretaria/montarGrade/addTurma")
	public String postAddTurma(@RequestParam Map<String, String> param, RedirectAttributes model) {
		Calendar calendar = Calendar.getInstance();
		Long cod = Long.parseLong(param.get("codCurso"));
		
		try {
			model.addFlashAttribute("curso", cserv.buscar(cod));
			model.addFlashAttribute("ano", calendar.get(Calendar.YEAR));
			model.addFlashAttribute("semestre", gcserv.getSemestre());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		inserirTurmaNull();
		
		model.addFlashAttribute("turmas", tserv.listarTurmasComNull());
		model.addFlashAttribute("disciplinas", dserv.listarTudo());
		model.addFlashAttribute("professores", pserv.listarTudo());
		
		return "redirect:/secretaria/grade/montar";
	}
	
	@PostMapping("/secretaria/montarGrade/addGrade")
	public String postAddGrade(HttpServletRequest param, RedirectAttributes model) {
		Long codCurso = Long.parseLong(param.getParameter("codCurso"));
		String ano = param.getParameter("ano");
		String semestre = param.getParameter("semestre");
		
		GradeCurricular g = inserirGrade(codCurso, Integer.parseInt(ano), Integer.parseInt(semestre));
		
		String[] codTurma = param.getParameterValues("codTurma");
		String[] horarioInicio = param.getParameterValues("horarioInicio");
		String[] horarioFim = param.getParameterValues("horarioFim");
		String[] diaDaSemana = param.getParameterValues("diaDaSemana");
		String[] codDisciplina = param.getParameterValues("codDisciplina");
		String[] codProfessor = param.getParameterValues("codProfessor");
		
		for (int i = 0; i < codTurma.length; i++) {
			atualizarTurmas(
				Long.parseLong(codTurma[i]), 
				horarioInicio[i], 
				horarioFim[i], 
				diaDaSemana[i], 
				Long.parseLong(codDisciplina[i]),
				Long.parseLong(codProfessor[i]),
				g
			);
		}
		
		model.addFlashAttribute("cursos", cserv.listarTudo());
		model.addFlashAttribute("curso", cserv.buscar(cod));
		
		return "redirect:/secretaria/grade/montar";
	}
	
	private void inserirTurmaNull() {
		Turma t = new Turma();
		tserv.inserir(t);
	}
	
	private GradeCurricular inserirGrade(Long codCurso, int ano, int semestre) {
		GradeCurricular g = new GradeCurricular();
		g.setAno(ano);
		g.setSemestre(semestre);
		
		cserv.listarTudo().forEach(c -> {
			if (c.getCod() == codCurso) {
				g.setCurso(c);
			}
		});
		
		gcserv.inserir(g);
		return g;
	}
	
	private void atualizarTurmas(Long codTurma, String horarioInicio, String horarioFim, String diaDaSemana, Long codDisciplina, Long codProfessor, GradeCurricular g) {
		try {
			Turma t = tserv.buscar(codTurma);
			
			t.setHorarioInicio(horarioInicio);
			t.setHorarioFim(horarioFim);
			t.setDiaDaSemana(diaDaSemana);
			dserv.listarTudo().forEach(d -> {
				if (d.getCod() == codDisciplina) {
					t.setDisciplina(d);
				}
			});
			pserv.listarTudo().forEach(p -> {
				if (p.getCod() == codProfessor) {
					t.setProfessor(p);
				}
			});
			t.setGrade(g);
			
			tserv.atualizar(t);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
